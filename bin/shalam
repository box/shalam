#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var sys = require('sys')
var exec = require('child_process').exec;

var argv = require('minimist')(process.argv.slice(2));
var semver = require('semver');

var main = require('../lib/main');
var git = require('../lib/git');

/**
 * Prints the CLI options.
 * @returns {void}
 */
function help() {
    console.log('Shalam Usage:');
    console.log('    shalam path/to/css path/to/images destination/path/for/sprite.png');
}

/**
 * Returns the current version of Shalam
 * @return {string} Current version of Shalam as a string
 */
function getCurrentVersion(cb) {
    exec('npm info shalam version', function (error, stdout, stderr) {
        if (error) {
            console.log('exec error: ' + error);
        } else if (stderr) {
            console.log('stderr: ' + stderr);
        } else {
            cb(stdout);
        }
    });
}


/**
 * Parses the instructions found within the provided package.json file.
 * @param {string} packageJSONPath Path to the JSON file to parse.
 * @param {string} instructionName Name of the instruction set to be run.
 * @returns {void}
 */
function runPackageJSON(packageJSONPath, instructionName) {
    console.log('Found package.json: ' + packageJSONPath);
    var contents = fs.readFileSync(packageJSONPath).toString();
    var contentsParsed = JSON.parse(contents);

    if (!('shalam' in contentsParsed) || !contentsParsed.shalam.length) {
        console.warn('No shalam instructions found in package.json!');
        return;
    }

    if ('shalamVersion' in contentsParsed) {
        var shalamVersion = contentsParsed.shalamVersion;
        getCurrentVersion(function(currentVersion) {
            if (!semver.satisfies(currentVersion, shalamVersion)) {
                console.error('The package.json file specifies a Shalam version that your installation does not meet.');
                console.error(currentVersion + ' does not satisfy ' + shalamVersion);
                process.exit(1);
                return;
            }

            processJSONRules(contentsParsed.shalam, path.dirname(packageJSONPath), instructionName);
        });
    }
}

/**
 * Parses the instructions found within the provided shalam.json file.
 * @param {string} shalamJSONPath Path to the JSON file to parse.
 * @param {string} instructionName Name of the instruction set to be run.
 * @returns {void}
 */
function runShalamJSON(shalamJSONPath, instructionName) {
    console.log('Found shalam.json: ' + shalamJSONPath);
    var contents = fs.readFileSync(shalamJSONPath).toString();
    processJSONRules(JSON.parse(contents), path.dirname(shalamJSONPath), instructionName);
}

/**
 * Executes the passed instructions from a JSON file.
 * @param {object[]} instructions Array of instructions to execute.
 * @param {string} dirname Path that the operation should take place in.
 * @param {string} instructionName Name of the instruction set to be run.
 * @returns {void}
 */
function processJSONRules(instructions, dirname, instructionName) {
    var processedInstructionsCounter = 0;
    instructions.forEach(function(instruction) {
        var cssPath = path.resolve(dirname, instruction.css);
        var spritePath = path.resolve(dirname, instruction.sprite);

        if (instructionName && instructionName !== instruction.name) return;

        if (git.isGitURI(instruction.img)) {
            console.log('Cloning "' + instruction.img + '"...');
            git.cloneGitURI(instruction.img, function(err, imgPath) {
                if (err) {
                    console.error(err);
                    return;
                }
                console.log('Succesfully cloned into ' + imgPath);
                setImmediate(main.run.bind(main), cssPath, imgPath, spritePath);
            });
            processedInstructionsCounter++;
            return;
        }

        var imgPath = path.resolve(dirname, instruction.img);
        setImmediate(main.run.bind(main), cssPath, imgPath, spritePath);
    });
    console.log(processedInstructionsCounter + ' instructions successfully processed');
}

// Test if the user typed `--help`
if ('help' in argv) {
    help();
    process.exit(0);
}

/**
 * Searches for an applicable JSON file and executes the instructions within
 * it.
 * @param {string} instructionName Name of the instruction set to be run.
 * @returns {void}
 */
function handlePackage(instructionName) {
    var basePath = process.cwd();
    var packagePath;
    // Iterate up each parent in the current path until a supported
    // JSON file is found.
    while (basePath !== '/') {
        // package.json
        packagePath = path.resolve(basePath, 'package.json');
        if (fs.existsSync(packagePath)) {
            runPackageJSON(packagePath, instructionName);
            return;
        }

        // shalam.json
        packagePath = path.resolve(basePath, 'shalam.json');
        if (fs.existsSync(packagePath)) {
            runShalamJSON(packagePath, instructionName);
            return;
        }

        basePath = path.resolve(basePath, '../');
    }

    console.error('Could not find package.json');
    process.exit(1);
}


if ('package' in argv) {
    // Handle `--package` with optional instruction name
    var instructionName = argv.package.length > 0 ? argv.package : null;
    handlePackage(instructionName);

} else if (argv._.length !== 3) {
    // If we've made it to this point, we're performing the normal
    // three-option operation.
    help();
    process.exit(1);

} else {

    if (git.isGitURI(argv._[1])) {
        // If the second parameter is a Git URI, clone it so we can run
        // against it.
        console.log('Cloning "' + argv._[1] + '"...');
        git.cloneGitURI(argv._[1], function(err, imgPath) {
            if (err) {
                console.error(err);
                process.exit(1);
            }
            console.log('Succesfully cloned into ' + imgPath);
            main.run(argv._[0], imgPath, argv._[2]);
        });
    } else {
        main.run(argv._[0], argv._[1], argv._[2]);
    }

}
